env_files = [
    "make.env"
]

[env]
RUST_BACKTRACE = "full"
RUST_RECURSION_COUNT = { unset = true }
CONTAINER_DB_PREFIX = "botstone-db"
CONTAINER_POSTGRES = "${CONTAINER_DB_PREFIX}-postgres"

# Aliases and flows
# Extend default tasks
[tasks.pre-build]
alias = "sqlx-update-flow"

[tasks.build]
args = ["build"]

[tasks.test]
args = ["test"]


# Define custom tasks
[tasks.sqlx-update-flow]
condition = { fail_message = "You need to have docker installed" }
condition_script = [
    "docker --help >/dev/null",
]
dependencies = [
    "setup-db",
    "run-migrations",
    "update-sqlx-data",
    "teardown-db",
]

[tasks.setup-db]
category = "Development"
description = "Setup database and seed it with migrations"
env = { "CARGO_MAKE_WAIT_MILLISECONDS" = 2000 }
run_task = "start-db-and-migrate"

[tasks.start-db-and-migrate]
dependencies = [
    "start-postgres",
    "wait",
    "run-migrations",
]

[tasks.teardown-db]
category = "Development"
description = "Teardown the database"
dependencies = [
    "stop-postgres",
    "remove-postgres",
]

[tasks.create-database]
category = "Development"
description = "Create database"
command = "cargo"
args = [
    "sqlx",
    "database",
    "create",
]

[tasks.run-migrations]
category = "Development"
description = "Run SQLX migrations"
dependencies = [ "create-database" ]
command = "cargo"
args = [
    "sqlx",
    "migrate",
    "run",
]

[tasks.update-sqlx-data]
category = "Development"
description = "Update sqlx-data.json"
dependencies = [ "run-migrations" ]
command = "cargo"
args = [
    "sqlx",
    "prepare",
]

[tasks.start-postgres]
alias = "start-docker-postgres"

[tasks.start-docker-postgres]
category = "Build"
description = "Start postgres database container"
command = "docker"
args = [
    "run",
    "-d",
    "--name", "${CONTAINER_POSTGRES}",
    "-e", "POSTGRES_PASSWORD",
    "-e", "POSTGRES_USER",
    "-e", "POSTGRES_DB",
    "-p", "${POSTGRES_PORT}:5432",
    "${POSTGRES_IMAGE_NAME}:${POSTGRES_IMAGE_VERSION}"
]

[tasks.stop-postgres]
alias = "stop-docker-postgres"

[tasks.stop-docker-postgres]
category = "Build"
description = "Stop postgress database container"
command = "docker"
args = [
    "stop",
    "${CONTAINER_POSTGRES}",
]


[tasks.remove-postgres]
alias = "remove-docker-postgres"

[tasks.remove-docker-postgres]
category = "Build"
description = "Remove postgress database container"
command = "docker"
args = [
    "rm",
    "${CONTAINER_POSTGRES}",
]
